/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps;							\
	.data;								\
	.long name;							\
	.text

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps;							\
	.data;								\
	.long name;							\
	.text


.data
.globl trap_vectors
trap_vectors:

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER_NOEC(trap_divide, T_DIVIDE)		// divide error
TRAPHANDLER_NOEC(trap_debug, T_DEBUG)		// debug exception
TRAPHANDLER_NOEC(trap_nmi, T_NMI)		// non-maskable interrupt
TRAPHANDLER_NOEC(trap_brkpt, T_BRKPT)		// breakpoint
TRAPHANDLER_NOEC(trap_oflow, T_OFLOW)		// overflow
TRAPHANDLER_NOEC(trap_bound, T_BOUND)		// bounds check
TRAPHANDLER_NOEC(trap_illop, T_ILLOP)		// illegal opcode
TRAPHANDLER_NOEC(trap_device, T_DEVICE)		// device not available
TRAPHANDLER(trap_dblflt, T_DBLFLT)		// double fault
TRAPHANDLER_NOEC(trap_coproc, 0)		// reserved (not generated by recent processors)
TRAPHANDLER(trap_tss, T_TSS)			// invalid task switch segment
TRAPHANDLER(trap_segnp, T_SEGNP)		// segment not present
TRAPHANDLER(trap_stack, T_STACK)		// stack exception
TRAPHANDLER(trap_gpflt, T_GPFLT)		// general protection fault
TRAPHANDLER(trap_pgflt, T_PGFLT)		// page fault
TRAPHANDLER_NOEC(trap_res, 0)			// reserved
TRAPHANDLER_NOEC(trap_fperr, T_FPERR)		// floating point error
TRAPHANDLER_NOEC(trap_align, T_ALIGN)		// aligment check
TRAPHANDLER_NOEC(trap_mchk, T_MCHK)		// machine check
TRAPHANDLER_NOEC(trap_simderr, T_SIMDERR)	// SIMD floating point error

TRAPHANDLER_NOEC(trap_syscall, T_SYSCALL)	// system call

TRAPHANDLER_NOEC(trap_irq_0, IRQ_OFFSET + 0)
TRAPHANDLER_NOEC(trap_irq_1, IRQ_OFFSET + 1)
TRAPHANDLER_NOEC(trap_irq_2, IRQ_OFFSET + 2)
TRAPHANDLER_NOEC(trap_irq_3, IRQ_OFFSET + 3)
TRAPHANDLER_NOEC(trap_irq_4, IRQ_OFFSET + 4)
TRAPHANDLER_NOEC(trap_irq_5, IRQ_OFFSET + 5)
TRAPHANDLER_NOEC(trap_irq_6, IRQ_OFFSET + 6)
TRAPHANDLER_NOEC(trap_irq_7, IRQ_OFFSET + 7)
TRAPHANDLER_NOEC(trap_irq_8, IRQ_OFFSET + 8)
TRAPHANDLER_NOEC(trap_irq_9, IRQ_OFFSET + 9)
TRAPHANDLER_NOEC(trap_irq_10, IRQ_OFFSET + 10)
TRAPHANDLER_NOEC(trap_irq_11, IRQ_OFFSET + 11)
TRAPHANDLER_NOEC(trap_irq_12, IRQ_OFFSET + 12)
TRAPHANDLER_NOEC(trap_irq_13, IRQ_OFFSET + 13)
TRAPHANDLER_NOEC(trap_irq_14, IRQ_OFFSET + 14)
TRAPHANDLER_NOEC(trap_irq_15, IRQ_OFFSET + 15)


/*
 * Lab 3: Your code here for _alltraps
 */

_alltraps:
	pushl	%ds
	pushl	%es
	pushal
	movw	$(GD_KD), %ax
	movw	%ax, %ds
	movw	%ax, %es
	pushl	%esp
	call	trap
